{
  "projects": [
    {
      "id": 1,
      "name": "Metadata Scraping / Automated Song Backup",
      "description": "I built a two-part Python automation pipeline to extract song titles and artist names from a web-based playlist. I used Selenium to scrape the data and save it to a structured text file. Then, I wrote a second script that automatically searched each track on YouTube, captured the top video URL, and compiled the links into a list for batch downloading. I used this list with yt-dlp to efficiently download the entire playlist, streamlining the process of creating offline music libraries.",
      "icons": ["Python", "Selenium"]
    },
    {
      "id": 2,
      "name": "Automated Payment Verification",
      "description": "I created a custom Python script to automate the verification of product payments by comparing two CSV files—one containing customer order data and the other listing Venmo transaction history. This project significantly streamlined what was previously a manual and error-prone task by automatically cross-referencing customer names, amounts, and timestamps to confirm completed payments. Built and tested in VS Code, the script reduced data entry and verification time by over 90%, greatly improving both speed and accuracy in processing customer transactions.",
      "icons": ["Python"]
    },
    {
      "id": 3,
      "name": "This Website",
      "description": "I designed and developed my own personal portfolio website from scratch as a way to represent my skills, creativity, and growth as a developer. Every part of the site—from the layout to the interactive elements—was built by me. I started by creating the full design in Figma, then brought it to life using HTML, CSS, JavaScript, and TypeScript. I used React for component-based structure and Bootstrap to ensure the site is fully responsive and visually consistent across all devices. This project is more than just a portfolio—it's a custom-built platform that reflects who I am as a developer, built entirely with tools and technologies I chose and implemented myself.",
      "icons": ["HTML", "CSS", "Typescript", "React", "Figma", "Bootstrap"]
    },
    {
      "id": 4,
      "name": "Tamogatchi",
      "description": "I used Python and the Turtle library in order to build a simple 'Tamogatchi' styled app, using Turtle for the visuals",
      "icons": ["Python"]
    },
    {
      "id": 5,
      "name": "Card Games with Object Oriented Programming",
      "description": "I used object oriented programming principles and java in order to build a functioning card game, starting from a card object which turned into decks which turned into tableaus",
      "icons":["Java"]
    },
    {
      "id": 6,
      "name": "Polynomial Arithmetic",
      "description": "Using linked lists that were made in Java, I made a program that will add and subtract polynomials from each other",
      "icons":["Java"] 
    },
    {
      "id": 7,
      "name": "Efficient Anagram Finder",
      "description": "I leveraged linked lists, array keys, and binary search trees in order to create a program that efficiently found all anagrams in a large body of text. For example, I was able to find thousands of anagrams in the book War and Peace in approximatelly 8 to 10 seconds",
      "icons":["Java"]
    },
    {
      "id": 8,
      "name": "Contacts Log System",
      "description": "I used a linked list and C in order to create a contacts log system, in this project I focused on concepts such as file I/O and proper memory management",
      "icons":["C"]
    },
    {
      "id": 9,
      "name": "Bitwise Puzzles and Debugging",
      "description":"I solved a series of problems only using bitwise operations to help create solutions that are optimized to run on smaller devices. I then had a portion where I used the debugger to solve a series of input puzzles",
      "icons":["C","GDB"]
    },
    {
      "id": 10,
      "name": "Assembly Practice and Binary Bomb Defusal",
      "description":"I solved the classic binary bomb defusal using the debugger to go through an assembly program in order to find the correct inputs needed to defuse six different stages. This helped teach me about reverse engineering. I also solved some smaller puzzles that required me to write code in X86-64 Assembly",
      "icons":["C","GDB","Assembly"]
    },
    {
      "id":11,
      "name":"Matrix Multiplication Optimization",
      "description":"I wrote and optimized a matrix multiplication program in order to reach x7 efficiency from the naive approach",
      "icons":["C"]
    }
  ]
}
